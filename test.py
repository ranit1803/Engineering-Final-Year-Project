import openai
import requests
from fpdf import FPDF
from openai import OpenAI
import os
from pathlib import Path

# Initialize the OpenAI client
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    raise ValueError("OpenAI API key not found. Set OPENAI_API_KEY environment variable.")

client = OpenAI(api_key=api_key)

# Fetch Sensor Data
def fetch_sensor_data():
    url = "https://api.thingspeak.com/channels/CHANNEL_ID/feeds.json?api_key=CHANNEL_READ_API_KEY&results=1"
    response = requests.get(url)

    if response.status_code != 200:
        raise ValueError(f"Failed to fetch data: {response.status_code}")

    data = response.json()
    if "feeds" not in data or not data["feeds"]:
        raise ValueError("No sensor data found in the response.")

    latest_feed = data["feeds"][-1]

    def safe_float(value):
        try:
            return float(value) if value not in [None, ""] else None
        except ValueError:
            return None

    sensor_data = {
        "Room Temperature": safe_float(latest_feed.get("field1")),
        "Humidity": safe_float(latest_feed.get("field2")),
        "Body Temperature": safe_float(latest_feed.get("field3")),
        "Gas Value (Alcohol)": safe_float(latest_feed.get("field4")),
        "Heart Rate": safe_float(latest_feed.get("field5")),
        "SPO2": safe_float(latest_feed.get("field6")),
        "Latitude": safe_float(latest_feed.get("field7")),
        "Longitude": safe_float(latest_feed.get("field8")),
    }

    return {k: v for k, v in sensor_data.items() if v is not None}

# AI Analysis with Medical Terms & Suggestions
def analyze_health_with_gpt(sensor_data):
    if not sensor_data:
        return "No valid sensor data available for analysis."

    prompt = f"""
    Based on the following health sensor data, provide:
    - Probable Health Risks (%) with medical terms.
    - One-line explanation of each medical term.
    - Suggestions for improvement (diet, lifestyle changes, etc.).
    - Recommend visiting a doctor in extreme conditions.

    Data:
    {sensor_data}

    Output format:
    1. **Parameter:** <Parameter Name>
       - **Value:** <Value>
       - **Risk Percentage:** <0-100%>
       - **Probable Health Risk (Medical Term):** <Medical Term>
       - **Explanation:** <Short Definition>
       - **Suggestions:** <What to do next>

    If a value is missing, ignore it.
    """

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"OpenAI API Error Details: {str(e)}")
        return f"OpenAI API Error: {e}"

# Generate Stylish PDF Report
class CustomPDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 20)
        self.set_text_color(30, 144, 255)
        self.cell(0, 10, "AI-Based Health Report", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 10)
        self.set_text_color(128)
        self.cell(0, 10, "Generated by AI | Stay Healthy", align="C")

def generate_pdf(sensor_data, ai_analysis):
    pdf = CustomPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", "", 14)

    pdf.set_text_color(255, 0, 0)
    if "SPO2" in sensor_data and sensor_data["SPO2"] < 90:
        pdf.cell(0, 10, f"WARNING: Low SPO2: {sensor_data['SPO2']}% (May indicate Hypoxia)", ln=True)
    if "Heart Rate" in sensor_data and (sensor_data["Heart Rate"] < 60 or sensor_data["Heart Rate"] > 100):
        pdf.cell(0, 10, f"WARNING: Abnormal Heart Rate: {sensor_data['Heart Rate']} bpm", ln=True)
    if "Body Temperature" in sensor_data and (sensor_data["Body Temperature"] < 22.2 or sensor_data["Body Temperature"] > 37.2):
        pdf.cell(0, 10, f"WARNING: Abnormal Body Temperature: {sensor_data['Body Temperature']}Â°C", ln=True)
    pdf.set_text_color(0, 0, 0)
    pdf.ln(5)

    pdf.set_fill_color(200, 220, 255)
    pdf.cell(50, 10, "Parameter", border=1, align="C", fill=True)
    pdf.cell(30, 10, "Value", border=1, align="C", fill=True)
    pdf.cell(40, 10, "Risk (%)", border=1, align="C", fill=True)
    pdf.cell(70, 10, "Probable Health Risk", border=1, align="C", fill=True)
    pdf.ln()

    risk_analysis_lines = ai_analysis.split("\n")
    analysis_dict = {}
    current_param = None

    for line in risk_analysis_lines:
        if "**Parameter:**" in line:
            current_param = line.split("**Parameter:**")[-1].strip()
            analysis_dict[current_param] = {}
        elif "**Value:**" in line:
            analysis_dict[current_param]["Value"] = line.split("**Value:**")[-1].strip()
        elif "**Risk Percentage:**" in line:
            analysis_dict[current_param]["Risk"] = line.split("**Risk Percentage:**")[-1].strip()
        elif "**Probable Health Risk (Medical Term):**" in line:
            analysis_dict[current_param]["Disease"] = line.split("**Probable Health Risk (Medical Term):**")[-1].strip()

    for key, value in sensor_data.items():
        risk = analysis_dict.get(key, {}).get("Risk", "N/A")
        disease = analysis_dict.get(key, {}).get("Disease", "None")

        pdf.cell(50, 10, key, border=1)
        pdf.cell(30, 10, str(value), border=1)
        pdf.cell(40, 10, risk, border=1)
        pdf.cell(70, 10, disease, border=1)
        pdf.ln()

    print("AI Response:\n", ai_analysis)

    pdf.ln(5)
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Medical Terms Explained:", ln=True)
    pdf.set_font("Arial", "", 12)

    for line in risk_analysis_lines:
        if "**Probable Health Risk (Medical Term):**" in line:
            disease_name = line.split("**Probable Health Risk (Medical Term):**")[-1].strip()
        if "**Explanation:**" in line:
            explanation = line.split("**Explanation:**")[-1].strip()
            pdf.multi_cell(0, 8, f"{disease_name} - {explanation}")

    pdf.ln(5)
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Suggestions & Precautions:", ln=True)
    pdf.set_font("Arial", "", 12)

    for line in risk_analysis_lines:
        if "**Suggestions:**" in line:
            suggestion = line.split("**Suggestions:**")[-1].strip()
            pdf.multi_cell(0, 8, f"{suggestion}")

    # Save to Downloads folder
    try:
        downloads_path = str(Path.home() / "Downloads")
        pdf_filename = os.path.join(downloads_path, "AI_Health_Report9.pdf")
        pdf.output(pdf_filename, "F")
        print(f"Report saved as '{pdf_filename}'.")
    except Exception as e:
        print(f"Error saving PDF: {e}")

# Main Execution
if __name__ == "__main__":
    try:
        sensor_data = fetch_sensor_data()
        print("Fetching AI Analysis...")
        ai_analysis = analyze_health_with_gpt(sensor_data)
        print("AI Response:\n", ai_analysis)
        generate_pdf(sensor_data, ai_analysis)
        print("PDF generation completed successfully.")
    except Exception as e:
        print(f"Error: {e}")
